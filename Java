----------------------------------------------------------------------------------------------
Java:
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
What is Java?
----------------------------------------------------------------------------------------------
Java is a high-level programming language that makes use of OOP (Object-Oriented Programming) created in 1995 by Sun Microsystems.
----------------------------------------------------------------------------------------------
Key Features:
----------------------------------------------------------------------------------------------
- Platform Independence: Java programs are compiled into bytecode, which can be run on any device with a Java Virtual Machine (JVM). This makes Java highly portable.
- Object-Oriented: Java emphasizes OOP principles such as encapsulation, inheritance, and polymorphism, which makes it modular and reusable.
- Simple and Familiar: Java syntax is relatively simple and derives much of its syntax from C and C++, making it easy to learn for programmers familiar with these languages.
- Robust and Secure: Java has strong memory management and built-in security features to prevent issues like memory leaks and to provide a secure runtime environment.
- Multithreaded: Java supports multithreading, allowing concurrent execution of two or more threads for maximum utilization of CPU.
- High Performance: Although Java is an interpreted language, the use of Just-In-Time (JIT) compilers allows Java code to be executed with high performance.
- Java Development Kit (JDK) and Java Runtime Environment (JRE)
- JDK: The Java Development Kit includes tools for developing, debugging, and monitoring Java applications.
- JRE: The Java Runtime Environment includes the JVM, core classes, and supporting files needed to run Java applications.
----------------------------------------------------------------------------------------------
Basic Syntax:
----------------------------------------------------------------------------------------------
- Case Sensitivity: Java is case-sensitive, meaning that Hello and hello are different identifiers.
- Class Names: The first letter of each word in a class name should be capitalized. Example: MyFirstClass.
- Method Names: The first letter of each word in a method name should be lowercase, with subsequent words capitalized. Example: myFirstMethod.
- File Names: The file name should match the class name and have a .java extension. Example: MyFirstClass.java.
----------------------------------------------------------------------------------------------
Java Program Structure:
----------------------------------------------------------------------------------------------
A basic Java program consists of the following structure:
----------
public class MyFirstClass {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
---------
public class MyFirstClass: Defines a class named MyFirstClass.
public static void main(String[] args): The main method where the program starts execution.
System.out.println("Hello, World!");: Prints "Hello, World!" to the console.
----------------------------------------------------------------------------------------------
Comments
----------------------------------------------------------------------------------------------
Comments are used to explain code and are ignored by the compiler.

Single-line comments: Start with //.
Multi-line comments: Enclosed between /* and */.
Documentation comments: Enclosed between /** and */.
---------
Example:
// This is a single-line comment

/*
 * This is a multi-line comment
 */

/**
 * This is a documentation comment
 * used for generating documentation.
 */
---------
----------------------------------------------------------------------------------------------
Common Use Cases:
----------------------------------------------------------------------------------------------
Java is widely used in various domains, including:

- Web Applications: Java is used for building server-side applications with technologies like JavaServer Pages (JSP) and Servlets.
- Enterprise Applications: Java Enterprise Edition (Java EE) provides a robust, scalable environment for enterprise applications.
- Mobile Applications: Java is the primary language for Android app development.
- Desktop Applications: Java Swing and JavaFX are used for building cross-platform desktop applications.
- Embedded Systems: Java is used in a variety of embedded systems due to its portability and efficiency.
----------------------------------------------------------------------------------------------
Variables:
----------------------------------------------------------------------------------------------
Variables are containers for storing data values.
Data Types: Common data types include int, float, double, char, boolean, String, etc.
Declaration: Variables must be declared before use.
---------
Example:

int myNumber = 5;
float myFloat = 5.99f;
char myChar = 'A';
boolean myBoolean = true;
String myString = "Hello";
---------
----------------------------------------------------------------------------------------------
Methods
----------------------------------------------------------------------------------------------
Methods are blocks of code that perform a specific task and are executed when called.
Syntax: Methods are defined with a return type, method name, and parameters (if any).
---------
Example:

public class MyClass {
    public void myMethod() {
        System.out.println("Hello, World!");
    }
}
---------
----------------------------------------------------------------------------------------------
Loops: Loops are used to execute a block of code repeatedly.
----------------------------------------------------------------------------------------------
For Loop: Executes a block of code a specific number of times.
----------------------------------------------------------------------------------------------
--------
Example:

for (int i = 0; i < 5; i++) {
    System.out.println(i);
}
--------
----------------------------------------------------------------------------------------------
While Loop: Executes a block of code as long as a condition is true.
----------------------------------------------------------------------------------------------
--------
Example:

int i = 0;
while (i < 5) {
    System.out.println(i);
    i++;
}
-------
----------------------------------------------------------------------------------------------
Do-While Loop: Executes a block of code once, and then repeats the loop as long as a condition is true.
----------------------------------------------------------------------------------------------
-------
Example:

int i = 0;
do {
    System.out.println(i);
    i++;
} while (i < 5);
-------
----------------------------------------------------------------------------------------------
If Statement
----------------------------------------------------------------------------------------------
The if statement is used to execute a block of code if a specified condition is true.
-------
Example:

int x = 10;
if (x > 5) {
    System.out.println("x is greater than 5");
}
-------
----------------------------------------------------------------------------------------------
If-Else Statement: Adds an alternative block of code to execute if the condition is false.
----------------------------------------------------------------------------------------------
-------
Example:

int x = 10;
if (x > 15) {
    System.out.println("x is greater than 15");
} else {
    System.out.println("x is not greater than 15");
}
-------
----------------------------------------------------------------------------------------------
Else If Statement: Adds more conditions to test if the initial condition is false.
----------------------------------------------------------------------------------------------
-------
Example:

int x = 10;
if (x > 15) {
    System.out.println("x is greater than 15");
} else if (x > 5) {
    System.out.println("x is greater than 5");
} else {
    System.out.println("x is 5 or less");
}
----------------------------------------------------------------------------------------------
Switch Statement
----------------------------------------------------------------------------------------------
The switch statement is used to select one of many code blocks to execute.
-------
Example:

int day = 3;
switch (day) {
    case 1:
        System.out.println("Monday");
        break;
    case 2:
        System.out.println("Tuesday");
        break;
    case 3:
        System.out.println("Wednesday");
        break;
    case 4:
        System.out.println("Thursday");
        break;
    case 5:
        System.out.println("Friday");
        break;
    case 6:
        System.out.println("Saturday");
        break;
    case 7:
        System.out.println("Sunday");
        break;
    default:
        System.out.println("Invalid day");
        break;
}
-------
----------------------------------------------------------------------------------------------
